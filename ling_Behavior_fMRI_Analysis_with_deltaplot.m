% This script analyzes the behavioral results and stimulus onsets for fMRI analysis in the log file generated by
% Presentatioh software
%
% Created by Ling Wang, 09.08.2011
%
% Modified by Ling Wang, 15.01.2014 
%       added the analysis of repetition effect 
% Edited by Ling Wang, 04.09.2014
%       Change to excluding outliers beyond 3 stdandard deviation
% Edited by Ling Wang, 22.09.2014
%       add comments for the error_flag, which actually indicates both
%       error (1) and outliers (2 and 3)
%       means of the repetition effects are divided by 10, (units are in ms now)
% Edited by Ling Wang, 31.12.2014
%       added the analysis of repretiont effect of the color label-response
%       key mapping for the Hedge and Marsh task
% Edited by Ling Wang, 2017/09/28
%       one subject may have more than one files, and the index of trials
%       in the whole experiment
% Edited by Ling Wang, 2018/3/8
%       change RTD analysis from 4 bins to [N] bins
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

log_folder = '/Users/eXrld/OneDrive - PsychoR/PhD_work/Behavioral_Experiment/Data_Analysis/group_analysis/valid_color_effect/W-R/deltaplot';

subject_files ={
    {'3',{'3-triangle-red_1.log','3-triangle-red_2.log'}};    
    {'4',{'4-triangle-red_1.log','4-triangle-red_2.log'}};    
    %{'sub18',{'sub18-b8.log'}};    
};


con_names = {'T_Scon', 'T_Sinc'};


results_name='single_trial';


%RT Distribution
%the first number minus the second number. The number correspods to the index of con_names
RTD = 1;
RTD_Prctile=[20 40 60 80];
RTD_Comp = {[2 1];};
fMRI_RTD = 1;

%the Gratton effect
Gratton = 0;
fMRI_Gratton = 1;

%fMRI onset
fMRI = 0;
TR = 20000; % Note: in ms * 10
dummy_scan = 4;

%Repetition effect
Repetition = 0;

%Separate data according to the order of each condition or the order of the
%all trials
part = 1; % how many parts 

% End of parameters
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
cd(log_folder);


subjects_data_sequential ={};

subjects_onset = {};
output_onsets = [];

ntrial=1;

%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%extract response (and stimulus onset) data
%
%%%%%%%%%%%%%%%%%%%%%%%%%%
for nsub = 1:length(subject_files)
    
    files_data_sequential=[];

    for nfile=1:length(subject_files{nsub}{2})
        [a b c d e f g h i j k l m n o p] = textread(subject_files{nsub}{2}{nfile}, '%s %s %s %s %s %s %s %s %s %s %s %s %s %s %s %s');                
        cond = b;
        respond_type = c;   %also it is event type
        response_key = d;   %the number of response key
        RT = e;             %also it is abosuloute time since begin of the experiment
    
        %find response data    
        for nline=1:length(cond)
            if strcmp (cond{nline}, 'Type') && strcmp (respond_type{nline}, 'Code')
                line_data = nline + 1;
                break;
            end;
        end;
    
        % for fMRI stim onset
        f_event = c(5:line_data-3);
        f_stimtype = d(5:line_data-3);
        f_time = e(5:line_data-3);
        f_rsptype = l(5:line_data-3);
    
    
        % for behavioral data analyses
        cond =cond(line_data:end);
        respond_type = respond_type(line_data:end);
        response_key = response_key(line_data:end);
        RT = RT(line_data:end);     
    
        data_response_sequential ={};        
        ntrial = 1;
        for nline=1:length(cond)
        
            for ncond=1:length(con_names)

                if strmatch (con_names{ncond}, cond{nline}) %strcmp(cond{nline}, con_names{ncond})

                    %the index of blocks, by Ling, 2017/9/28
                    data_response_sequential(ntrial).nblock = nfile;
                    
                    %condition name
                    data_response_sequential(ntrial).cond = con_names{ncond};    %cond{nline};

                    %original condition name
                    data_response_sequential(ntrial).ori_cond = cond{nline};

                    %response type
                    data_response_sequential(ntrial).respond_type = respond_type{nline};

                    %response key
                    data_response_sequential(ntrial).response_key = response_key{nline};

                    %RT
                    data_response_sequential(ntrial).RT = str2num(RT{nline});

                    %the index of the current trial
                    data_response_sequential(ntrial).trial_index = ntrial;                                                                

                    %stimulus repetition
                    %modified by Ling, 2014/10/13; change ".cond" to ".ori_cond"
                    data_response_sequential(ntrial).stimulus_reptetion = 0;
                    if ntrial > 2
                        if strcmp(data_response_sequential(ntrial).ori_cond,data_response_sequential(ntrial-1).ori_cond)
                            data_response_sequential(ntrial).stimulus_reptetion = 1;
                        end;
                    end;

                    %response repetition
                    data_response_sequential(ntrial).response_reptetion = 0;
                    if ntrial > 2
                        if strcmp(data_response_sequential(ntrial).response_key,data_response_sequential(ntrial-1).response_key)
                            data_response_sequential(ntrial).response_reptetion = 1;
                        end;
                    end;

                    %repetition of color label-response key mapping for the Hedge and Marsh task                
                    %added by Ling, 2014/12/31
                    data_response_sequential(ntrial).mapping_reptetion = 0;
                    if ntrial > 2
                        if strcmp(data_response_sequential(ntrial).ori_cond(1:end-5),data_response_sequential(ntrial-1).ori_cond(1:end-5))
                            data_response_sequential(ntrial).mapping_reptetion = 1;
                        end;
                    end;

                    %TR, default is 0. If fMRI, set TR below
                    data_response_sequential(ntrial).TR = 0;

                    ntrial = ntrial + 1;
                    break;

                end;
            end;
        end;
            
        % calculate stim onset in TR
        if fMRI
            % remove dummy scanns
            if dummy_scan > 0

                ds = 0;

                for nd=1:length(f_event)
                    if strmatch ('Pulse', f_event{nd})
                        ds = ds + 1;
                        if ds > dummy_scan
                            break;
                        end;
                    end;

                end;

                f_event = f_event(nd:end);
                f_stimtype = f_stimtype(nd:end);
                f_time = f_time(nd:end);
                f_rsptype = f_rsptype(nd:end);
            end;

            onset =[];
            onset{1}=0;
            for nt = 2:length(f_event)

                onset{nt}=onset{nt-1}+(str2num(f_time{nt})-str2num(f_time{nt-1}))/TR;

            end;

            %subjects_onset{nsub} ={f_event, f_stimtype, f_time, f_rsptype,  onset'};

            % for sequential data
            ntrial=1;
            for nline=1:length(f_stimtype)

                for ncond=1:length(con_names)

                    if strmatch (con_names{ncond}, f_stimtype{nline}) %strcmp(cond{nline}, con_names{ncond})

                        data_response_sequential(ntrial).TR = onset{nline};
                        ntrial=ntrial+1;

                    end;
                end;
            end;
            
        end;
        
        if nfile > 1
            files_data_sequential(end+1:end+length(data_response_sequential)) = data_response_sequential;
        else
            files_data_sequential = data_response_sequential;
        end;
    end;
    
    %Ling, 2017/9/28
    for nalltrial=1:length(files_data_sequential)
        files_data_sequential(nalltrial).nalltrial_index=nalltrial;
    end;
        
    subjects_data_sequential{nsub} = files_data_sequential;
    
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%statistical analysis of the data
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
subjects_data = {};
for nsub=1:length(subjects_data_sequential)
    sub_data = subjects_data_sequential{nsub};

    data_response=[];

    for n=1:length(con_names)
        data_response(n).trials=[];
    end;

    %find trials for each conditon
    for ntrial=1:length(sub_data)

        for ncond=1:length(con_names)

            if strmatch (con_names{ncond}, sub_data(ntrial).cond)

                nct=length(data_response(ncond).trials)+1;

                %condition name
                data_response(ncond).trials(nct).cond=sub_data(ntrial).cond;                
                
                %original condition name
                data_response(ncond).trials(nct).ori_cond=sub_data(ntrial).ori_cond;

                %response type
                data_response(ncond).trials(nct).respond_type=sub_data(ntrial).respond_type;

                %RT
                data_response(ncond).trials(nct).RT=sub_data(ntrial).RT;

                %TR - fMRI
                if fMRI
                	data_response(ncond).trials(nct).TR=sub_data(ntrial).TR;
                else
                	data_response(ncond).trials(nct).TR=0;
                end;

                %the index of the current trial
                data_response(ncond).trials(nct).trial_index=sub_data(ntrial).trial_index;
                
                %stimulus_reptetion                
                data_response(ncond).trials(nct).stimulus_reptetion=sub_data(ntrial).stimulus_reptetion;
                
                %response_reptetion                
                data_response(ncond).trials(nct).response_reptetion=sub_data(ntrial).response_reptetion;
                
                %mapping_reptetion                
                data_response(ncond).trials(nct).mapping_reptetion=sub_data(ntrial).mapping_reptetion;
                
                %Ling, 2017/9/28
                data_response(ncond).trials(nct).nblock=sub_data(ntrial).nblock;
                data_response(ncond).trials(nct).nalltrial_index=sub_data(ntrial).nalltrial_index;
                data_response(ncond).trials(nct).response_key=sub_data(ntrial).response_key;

                break;

            end;

        end;
    end;
    
    if part > 1
        %separate the data according to the order of each condition
        for npart_con=1:part
            for ncond=1:length(con_names)
                
                number_trial=round(length(data_response(ncond).trials)/part);
                
                if npart_con < part
                    part_range = [(npart_con -1)*number_trial+1:npart_con*number_trial];
                else
                    part_range = [(npart_con -1)*number_trial+1:length(data_response(ncond).trials)];
                end;
                
                data_response(ncond).parts_con(npart_con).trials = data_response(ncond).trials(part_range);
                
            end;
            
        end;
        
        %separate the data according to the order of all trials
        all_trial=length(sub_data);
        for npart_time=1:part
            number_trial=round(all_trial/part);
            if npart_time < part
                part_range = [(npart_time -1)*number_trial+1 npart_time*number_trial];
            else
                part_range = [(npart_time -1)*number_trial+1 all_trial];
            end;
            for ncond=1:length(con_names)
                cond_trials=[data_response(ncond).trials.trial_index];
                tmp_range=find(cond_trials>=part_range(1) & cond_trials<=part_range(2));
                data_response(ncond).parts_time(npart_time).trials = data_response(ncond).trials(tmp_range);
                
            end;
            
        end;
    end;
    
            
    %summay the data for each condition    
    for ncond=1:length(con_names)
        
        data_response(ncond).con_name = con_names{ncond};
        
        all_RT=[];
        correct_RT=[];
        correct_TR=[];
        error_flag=[];
        wrong_RT=[];
        wrong_TR=[];
        
        stimulus_repetition_flag =[];
        response_repetition_flag =[];
        mapping_repetition_flag =[];
        
        nflage = 0;
        for nt=1:length(data_response(ncond).trials)
            if strcmp('hit', data_response(ncond).trials(nt).respond_type)
                correct_RT=[correct_RT data_response(ncond).trials(nt).RT];
                correct_TR=[correct_TR data_response(ncond).trials(nt).TR];
                nflage = 0;
            else
                wrong_RT=[wrong_RT data_response(ncond).trials(nt).RT];
                wrong_TR=[wrong_TR data_response(ncond).trials(nt).TR];
                nflage = 1;                
            end;
            
            all_RT=[all_RT data_response(ncond).trials(nt).RT];
            error_flag=[error_flag nflage];
            
            %stimulus_repetition
            stimulus_repetition_flag=[stimulus_repetition_flag data_response(ncond).trials(nt).stimulus_reptetion];
            
            %response_repetition
            response_repetition_flag=[response_repetition_flag data_response(ncond).trials(nt).response_reptetion];
            
            %mapping_repetition
            mapping_repetition_flag=[mapping_repetition_flag data_response(ncond).trials(nt).mapping_reptetion];
            
                        
        end;
        
        data_response(ncond).all_RT = all_RT;
        data_response(ncond).correct_RT = correct_RT;
        data_response(ncond).correct_TR = correct_TR;
        data_response(ncond).wrong_RT = wrong_RT;
        data_response(ncond).wrong_TR = wrong_TR;
        data_response(ncond).error_flag = error_flag; % 1 means an error        
        data_response(ncond).total_trial_number=length(data_response(ncond).trials);
        data_response(ncond).correct_trial_number=length(data_response(ncond).correct_RT);
        data_response(ncond).wrong_trial_number=length(data_response(ncond).wrong_RT);
        
        data_response(ncond).mRT = mean(data_response(ncond).correct_RT)/10;
        data_response(ncond).MedianRT = median(data_response(ncond).correct_RT)/10;
        data_response(ncond).stdRT = std(data_response(ncond).correct_RT)/10;
        %data_response(ncond).quartileRT = ling_quartile (data_response(ncond).correct_RT); % 1st: 25%, 2nd: 50%, 3rd: 75%
        data_response(ncond).error = data_response(ncond).wrong_trial_number/data_response(ncond).total_trial_number;
        
        %find outliers >mean + 3 * std or < mean - 3 * std        
        %IRQ = data_response(ncond).quartileRT(3) - data_response(ncond).quartileRT(1);
        u_index_outlier=find(data_response(ncond).correct_RT > 10*(data_response(ncond).mRT + 3 * data_response(ncond).stdRT));
        l_index_outlier=find(data_response(ncond).correct_RT < 10*(data_response(ncond).mRT - 3 * data_response(ncond).stdRT));
        
        correct_res=find(error_flag==0);%all correct response
        
        data_response(ncond).error_flag(correct_res(u_index_outlier)) =2; %upper outliers
        data_response(ncond).error_flag(correct_res(l_index_outlier)) =3; %lower outliers
        
        rawRT_rm_outlier=data_response(ncond).correct_RT;
        rawRT_rm_outlier([u_index_outlier l_index_outlier])='';
        
        rawTR_rm_outlier=data_response(ncond).correct_TR;
        rawTR_rm_outlier([u_index_outlier l_index_outlier])='';
                        
        data_response(ncond).correct_RT_index_outlier = [u_index_outlier l_index_outlier];
        data_response(ncond).correct_RT_rm_outlier=rawRT_rm_outlier;
        data_response(ncond).correct_TR_rm_outlier=rawTR_rm_outlier;
        data_response(ncond).mRT_rm_outlier = mean(rawRT_rm_outlier)/10; %ms     
        data_response(ncond).MedianRT_rm_outlier = median(rawRT_rm_outlier)/10; %ms
        
        %----stimulus_repetiton
        data_response(ncond).stimulus_repetition_flag=stimulus_repetition_flag;
        data_response(ncond).stimulus_repetition_ratio=length(find(stimulus_repetition_flag))/length(stimulus_repetition_flag);
        
        %non stimulus_repetiton RTs
        % comments by Ling, 22.09.2014
        % error_flag also indicates outerliers(2 or 3). This means that the outliers are
        % excluded from the analysis of the repetition effect.
        data_response(ncond).stimulus_repetition_RT_0 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, ~data_response(ncond).stimulus_repetition_flag));
        
        %stimulus_repetiton RTs
        data_response(ncond).stimulus_repetition_RT_1 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, data_response(ncond).stimulus_repetition_flag));
        
        data_response(ncond).mean_stimulus_repetition_RT_0=mean(data_response(ncond).stimulus_repetition_RT_0)/10;
        data_response(ncond).std_stimulus_repetition_RT_0=std(data_response(ncond).stimulus_repetition_RT_0)/10;
        data_response(ncond).mean_stimulus_repetition_RT_1=mean(data_response(ncond).stimulus_repetition_RT_1)/10;
        data_response(ncond).std_stimulus_repetition_RT_1=std(data_response(ncond).stimulus_repetition_RT_1)/10;
        
        %----response_repetiton        
        data_response(ncond).response_repetition_flag=response_repetition_flag;
        data_response(ncond).response_repetition_ratio=length(find(response_repetition_flag))/length(response_repetition_flag);
         
        %non response_repetiton RTs        
        data_response(ncond).response_repetition_RT_0 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, ~data_response(ncond).response_repetition_flag));
        
        %response_repetiton RTs
        data_response(ncond).response_repetition_RT_1 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, data_response(ncond).response_repetition_flag));
        
        data_response(ncond).mean_response_repetition_RT_0=mean(data_response(ncond).response_repetition_RT_0)/10;
        data_response(ncond).std_response_repetition_RT_0=std(data_response(ncond).response_repetition_RT_0)/10;
        data_response(ncond).mean_response_repetition_RT_1=mean(data_response(ncond).response_repetition_RT_1)/10;
        data_response(ncond).std_response_repetition_RT_1=std(data_response(ncond).response_repetition_RT_1)/10;
        
        
        %----either stimulus or response_repetition
        data_response(ncond).stim_res_repetition_flag=or(stimulus_repetition_flag, response_repetition_flag);
        data_response(ncond).stim_res_repetition_ratio=length(find(data_response(ncond).stim_res_repetition_flag))/length(data_response(ncond).stim_res_repetition_flag);
        
        %non response_repetiton RTs        
        data_response(ncond).stim_res_repetition_RT_0 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, ~data_response(ncond).stim_res_repetition_flag));
        
        %response_repetiton RTs
        data_response(ncond).stim_res_repetition_RT_1 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, data_response(ncond).stim_res_repetition_flag));
        
        data_response(ncond).mean_stim_res_repetition_RT_0=mean(data_response(ncond).stim_res_repetition_RT_0)/10;
        data_response(ncond).std_stim_res_repetition_RT_0=std(data_response(ncond).stim_res_repetition_RT_0)/10;
        data_response(ncond).mean_stim_res_repetition_RT_1=mean(data_response(ncond).stim_res_repetition_RT_1)/10;
        data_response(ncond).std_stim_res_repetition_RT_1=std(data_response(ncond).stim_res_repetition_RT_1)/10;
        
        
        %----mapping_repetiton, added by Ling, 2014-12-31        
        data_response(ncond).mapping_repetition_flag=mapping_repetition_flag;
        data_response(ncond).mapping_repetition_ratio=length(find(mapping_repetition_flag))/length(mapping_repetition_flag);
         
        %non response_repetiton RTs        
        data_response(ncond).mapping_repetition_RT_0 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, ~data_response(ncond).mapping_repetition_flag));
        
        %response_repetiton RTs
        data_response(ncond).mapping_repetition_RT_1 = data_response(ncond).all_RT(and(~data_response(ncond).error_flag, data_response(ncond).mapping_repetition_flag));
        
        data_response(ncond).mean_mapping_repetition_RT_0=mean(data_response(ncond).mapping_repetition_RT_0)/10;
        data_response(ncond).std_mapping_repetition_RT_0=std(data_response(ncond).mapping_repetition_RT_0)/10;
        data_response(ncond).mean_mapping_repetition_RT_1=mean(data_response(ncond).mapping_repetition_RT_1)/10;
        data_response(ncond).std_mapping_repetition_RT_1=std(data_response(ncond).mapping_repetition_RT_1)/10;
        
                                
    end;
    
    if part > 1
        %separate the data according to the order of each condition
        for npart=1:part
            for ncond=1:length(con_names)
                
                correct_RT=[];
                correct_TR=[];
                error_flag=[];
                wrong_RT=[];
                wrong_TR=[];
                
                nflage = 0;
                for nt=1:length(data_response(ncond).parts_con(npart).trials)
                    if strcmp('hit', data_response(ncond).parts_con(npart).trials(nt).respond_type)
                        correct_RT=[correct_RT data_response(ncond).parts_con(npart).trials(nt).RT];
                        correct_TR=[correct_TR data_response(ncond).parts_con(npart).trials(nt).TR];
                        nflage = 0;
                    else
                        wrong_RT=[wrong_RT data_response(ncond).parts_con(npart).trials(nt).RT];
                        wrong_TR=[wrong_TR data_response(ncond).parts_con(npart).trials(nt).TR];
                        nflage = 1;
                    end;
                    error_flag=[error_flag nflage];
                    
                end;
                
                data_response(ncond).parts_con(npart).correct_RT = correct_RT;
                data_response(ncond).parts_con(npart).correct_TR = correct_TR;
                data_response(ncond).parts_con(npart).wrong_RT = wrong_RT;
                data_response(ncond).parts_con(npart).wrong_TR = wrong_TR;
                data_response(ncond).parts_con(npart).error_flag = error_flag; % 1 means an error
                data_response(ncond).parts_con(npart).total_trial_number=length(data_response(ncond).parts_con(npart).trials);
                data_response(ncond).parts_con(npart).correct_trial_number=length(data_response(ncond).parts_con(npart).correct_RT);
                data_response(ncond).parts_con(npart).wrong_trial_number=length(data_response(ncond).parts_con(npart).wrong_RT);
                
                data_response(ncond).parts_con(npart).mRT = mean(data_response(ncond).parts_con(npart).correct_RT)/10;
                data_response(ncond).parts_con(npart).MedianRT = median(data_response(ncond).parts_con(npart).correct_RT)/10;
                data_response(ncond).parts_con(npart).stdRT = std(data_response(ncond).parts_con(npart).correct_RT)/10;
                %data_response(ncond).parts_con(npart).quartileRT = ling_quartile (data_response(ncond).parts_con(npart).correct_RT); % 1st: 25%, 2nd: 50%, 3rd: 75%
                data_response(ncond).parts_con(npart).error = data_response(ncond).parts_con(npart).wrong_trial_number/data_response(ncond).parts_con(npart).total_trial_number;
                
                %find outliers >mean + 3 * std or < mean - 3 * std
                %IRQ = data_response(ncond).parts_con(npart).quartileRT(3) - data_response(ncond).parts_con(npart).quartileRT(1);
                u_index_outlier=find(data_response(ncond).parts_con(npart).correct_RT > 10*(data_response(ncond).parts_con(npart).mRT + 3 * data_response(ncond).parts_con(npart).stdRT));
                l_index_outlier=find(data_response(ncond).parts_con(npart).correct_RT < 10*(data_response(ncond).parts_con(npart).mRT - 3 * data_response(ncond).parts_con(npart).stdRT));
                
                rawRT_rm_outlier=data_response(ncond).parts_con(npart).correct_RT;
                rawRT_rm_outlier([u_index_outlier l_index_outlier])='';
                
                rawTR_rm_outlier=data_response(ncond).parts_con(npart).correct_TR;
                rawTR_rm_outlier([u_index_outlier l_index_outlier])='';
                
                data_response(ncond).parts_con(npart).correct_RT_index_outlier = [u_index_outlier l_index_outlier];
                data_response(ncond).parts_con(npart).correct_RT_rm_outlier=rawRT_rm_outlier;
                data_response(ncond).parts_con(npart).correct_TR_rm_outlier=rawTR_rm_outlier;
                data_response(ncond).parts_con(npart).mRT_rm_outlier = mean(rawRT_rm_outlier)/10; %ms
                data_response(ncond).parts_con(npart).MedianRT_rm_outlier = median(rawRT_rm_outlier)/10; %ms
                
            end;
        end;
        
        %separate the data according to the order of all trials
        for npart=1:part
            for ncond=1:length(con_names)
                
                correct_RT=[];
                correct_TR=[];
                error_flag=[];
                wrong_RT=[];
                wrong_TR=[];
                
                nflage = 0;
                for nt=1:length(data_response(ncond).parts_time(npart).trials)
                    if strcmp('hit', data_response(ncond).parts_time(npart).trials(nt).respond_type)
                        correct_RT=[correct_RT data_response(ncond).parts_time(npart).trials(nt).RT];
                        correct_TR=[correct_TR data_response(ncond).parts_time(npart).trials(nt).TR];
                        nflage = 0;
                    else
                        wrong_RT=[wrong_RT data_response(ncond).parts_time(npart).trials(nt).RT];
                        wrong_TR=[wrong_TR data_response(ncond).parts_time(npart).trials(nt).TR];
                        nflage = 1;
                    end;
                    error_flag=[error_flag nflage];
                    
                end;
                
                data_response(ncond).parts_time(npart).correct_RT = correct_RT;
                data_response(ncond).parts_time(npart).correct_TR = correct_TR;
                data_response(ncond).parts_time(npart).wrong_RT = wrong_RT;
                data_response(ncond).parts_time(npart).wrong_TR = wrong_TR;
                data_response(ncond).parts_time(npart).error_flag = error_flag; % 1 means an error
                data_response(ncond).parts_time(npart).total_trial_number=length(data_response(ncond).parts_time(npart).trials);
                data_response(ncond).parts_time(npart).correct_trial_number=length(data_response(ncond).parts_time(npart).correct_RT);
                data_response(ncond).parts_time(npart).wrong_trial_number=length(data_response(ncond).parts_time(npart).wrong_RT);
                
                data_response(ncond).parts_time(npart).mRT = mean(data_response(ncond).parts_time(npart).correct_RT)/10;
                data_response(ncond).parts_time(npart).MedianRT = median(data_response(ncond).parts_time(npart).correct_RT)/10;
                data_response(ncond).parts_time(npart).stdRT = std(data_response(ncond).parts_time(npart).correct_RT)/10;
                %data_response(ncond).parts_time(npart).quartileRT = ling_quartile (data_response(ncond).parts_time(npart).correct_RT); % 1st: 25%, 2nd: 50%, 3rd: 75%
                data_response(ncond).parts_time(npart).error = data_response(ncond).parts_time(npart).wrong_trial_number/data_response(ncond).parts_time(npart).total_trial_number;
                
                %find outliers >mean + 3 * std or < mean - 3 * std
                %IRQ = data_response(ncond).parts_time(npart).quartileRT(3) - data_response(ncond).parts_time(npart).quartileRT(1);
                u_index_outlier=find(data_response(ncond).parts_time(npart).correct_RT > 10*(data_response(ncond).parts_time(npart).mRT + 3 * data_response(ncond).parts_time(npart).stdRT));
                l_index_outlier=find(data_response(ncond).parts_time(npart).correct_RT < 10*(data_response(ncond).parts_time(npart).mRT - 3 * data_response(ncond).parts_time(npart).stdRT));
                
                rawRT_rm_outlier=data_response(ncond).parts_time(npart).correct_RT;
                rawRT_rm_outlier([u_index_outlier l_index_outlier])='';
                
                rawTR_rm_outlier=data_response(ncond).parts_time(npart).correct_TR;
                rawTR_rm_outlier([u_index_outlier l_index_outlier])='';
                
                data_response(ncond).parts_time(npart).correct_RT_index_outlier = [u_index_outlier l_index_outlier];
                data_response(ncond).parts_time(npart).correct_RT_rm_outlier=rawRT_rm_outlier;
                data_response(ncond).parts_time(npart).correct_TR_rm_outlier=rawTR_rm_outlier;
                data_response(ncond).parts_time(npart).mRT_rm_outlier = mean(rawRT_rm_outlier)/10; %ms
                data_response(ncond).parts_time(npart).MedianRT_rm_outlier = median(rawRT_rm_outlier)/10; %ms
                
            end;
        end;
        
    end;
    
    subjects_data{nsub}.subname = subject_files{nsub}{1};
    subjects_data{nsub}.conditions = data_response;
    
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%RT Distibution Analysis
%
%%%%%%%%%%%%%%%%%%%%%%%%%%
RTD_subjects=[];

if RTD
    for nsub=1:length(subjects_data)
        RTD_subjects(nsub).subname = subjects_data{nsub}.subname;
        
        for ncond=1:length(con_names)
            
            RTD_subjects(nsub).conditions(ncond).con_name=con_names{ncond};
            
            RTD_subjects(nsub).conditions(ncond).rawRT = subjects_data{nsub}.conditions(ncond).correct_RT;
            RTD_subjects(nsub).conditions(ncond).rawRT_rm_outlier = subjects_data{nsub}.conditions(ncond).correct_RT_rm_outlier;
            
            RTD_subjects(nsub).conditions(ncond).rawTR = subjects_data{nsub}.conditions(ncond).correct_TR;
            RTD_subjects(nsub).conditions(ncond).rawTR_rm_outlier = subjects_data{nsub}.conditions(ncond).correct_TR_rm_outlier;
            RTD_subjects(nsub).conditions(ncond).wrong_TR = subjects_data{nsub}.conditions(ncond).wrong_TR;
            
            [RTD_subjects(nsub).conditions(ncond).sortRT index_raw] = sort(RTD_subjects(nsub).conditions(ncond).rawRT);
            [RTD_subjects(nsub).conditions(ncond).sortRT_rm_outlier index_raw_outlier] = sort(RTD_subjects(nsub).conditions(ncond).rawRT_rm_outlier);
            
            RTD_subjects(nsub).conditions(ncond).sortTR = RTD_subjects(nsub).conditions(ncond).rawTR(index_raw);
            RTD_subjects(nsub).conditions(ncond).sortTR_rm_outlier = RTD_subjects(nsub).conditions(ncond).rawTR_rm_outlier(index_raw_outlier);
            
            
            %Ling Wang, 2018-3-8, from four bins to [N] bins
            %generate the percentiles
            
            %raw RT
            QRT = prctile(RTD_subjects(nsub).conditions(ncond).sortRT, RTD_Prctile);
            
            for nq=1:length(QRT)
                I_Q(nq)=max(find(RTD_subjects(nsub).conditions(ncond).sortRT<QRT(nq)));
                
                %the indices of the bins
                if nq==1
                    RTD_subjects(nsub).conditions(ncond).I_Q_Bin{1}=[1:I_Q(1)];
                else
                    RTD_subjects(nsub).conditions(ncond).I_Q_Bin{nq}=[I_Q(nq-1)+1:I_Q(nq)];
                end;
                    
            end;
            
            %the indices of the last bin
            RTD_subjects(nsub).conditions(ncond).I_Q_Bin{end+1}=[I_Q(end)+1:length(RTD_subjects(nsub).conditions(ncond).sortRT)];
            
           
            for niq=1:length(RTD_subjects(nsub).conditions(ncond).I_Q_Bin)
                
                %the indices of TR of each bin
                RTD_subjects(nsub).conditions(ncond).TR{niq} = RTD_subjects(nsub).conditions(ncond).sortTR(RTD_subjects(nsub).conditions(ncond).I_Q_Bin{niq}); 
                
                %mean of each bin
                RTD_subjects(nsub).conditions(ncond).mean_Bins(niq) = mean(RTD_subjects(nsub).conditions(ncond).sortRT(RTD_subjects(nsub).conditions(ncond).I_Q_Bin{niq}));
                
            end;                                               
            
            %
            %raw RT removing outliers
            %
            QRT = prctile(RTD_subjects(nsub).conditions(ncond).sortRT_rm_outlier, RTD_Prctile);
            
            for nq=1:length(QRT)
                I_Q(nq)=max(find(RTD_subjects(nsub).conditions(ncond).sortRT_rm_outlier<QRT(nq)));
                
                %the indices of the bins
                if nq==1
                    RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier{1}=[1:I_Q(1)];
                else
                    RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier{nq}=[I_Q(nq-1)+1:I_Q(nq)];
                end;
                    
            end;
            
            %the indices of the last bin
            RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier{end+1}=[I_Q(end)+1:length(RTD_subjects(nsub).conditions(ncond).sortRT_rm_outlier)];
            
           
            for niq=1:length(RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier)
                
                %the indices of TR of each bin
                RTD_subjects(nsub).conditions(ncond).TR_rm_outlier{niq} = RTD_subjects(nsub).conditions(ncond).sortTR_rm_outlier(RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier{niq}); 
                
                %mean of each bin
                RTD_subjects(nsub).conditions(ncond).mean_Bins_rm_outlier(niq) = mean(RTD_subjects(nsub).conditions(ncond).sortRT_rm_outlier(RTD_subjects(nsub).conditions(ncond).I_Q_Bin_rm_outlier{niq}));
                
            end;
                                                
        end;
                
    end;
end;

%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Analysis of Sequential effect/Gratton effect
%
%%%%%%%%%%%%%%%%%%%%%%%%%%
Gratton_subjects=[];

if Gratton

    for nsub=1:length(subjects_data_sequential)
        Gratton_subjects(nsub).subname = subject_files{nsub}{1};
        
        %The first trial
        Gratton_subjects(nsub).data(1).con_name = ['FIRST_' subjects_data_sequential{nsub}(1).cond] ;
        Gratton_subjects(nsub).data(1).RT = subjects_data_sequential{nsub}(1).RT;
        Gratton_subjects(nsub).data(1).TR = subjects_data_sequential{nsub}(1).TR;
        Gratton_subjects(nsub).data(1).trial_index = subjects_data_sequential{nsub}(1).trial_index;
        
        %if it is an error
        if ~strcmp (subjects_data_sequential{nsub}(1).respond_type, 'hit')
            Gratton_subjects(nsub).data(1).error_trial = 1;
        else
            Gratton_subjects(nsub).data(1).error_trial = 0;
        end;

        Gratton_subjects(nsub).data(1).posterror_trial = 0;
        

        for ntrial=2:length(subjects_data_sequential{nsub})
            Gratton_subjects(nsub).data(ntrial).con_name = [subjects_data_sequential{nsub}(ntrial-1).cond(1:5) '_' subjects_data_sequential{nsub}(ntrial).cond(1:5)];
            Gratton_subjects(nsub).data(ntrial).RT = subjects_data_sequential{nsub}(ntrial).RT;
            Gratton_subjects(nsub).data(ntrial).TR = subjects_data_sequential{nsub}(ntrial).TR;
            Gratton_subjects(nsub).data(ntrial).trial_index = subjects_data_sequential{nsub}(ntrial).trial_index;
            
            
            % error trials
            if ~strcmp (subjects_data_sequential{nsub}(ntrial).respond_type, 'hit')
                Gratton_subjects(nsub).data(ntrial).error_trial = 1;
            else
                Gratton_subjects(nsub).data(ntrial).error_trial = 0;
            end;
            
            
            % post error trials 
            if ~strcmp (subjects_data_sequential{nsub}(ntrial-1).respond_type, 'hit')
                Gratton_subjects(nsub).data(ntrial).posterror_trial = 1;
            else
                Gratton_subjects(nsub).data(ntrial).posterror_trial = 0;
            end;


        end;


        nerror=1;
        nposterror=1;

        rawRT ={};
        rawTR ={};
        index_n ={};
        ncombination={};

        for ncond=1:length(con_names)
            for nlast=1:length(con_names)
                ncombination{(ncond-1)*length(con_names)+nlast}=1;
            end;
        end;

        for ntrial =1:length(Gratton_subjects(nsub).data)

            if Gratton_subjects(nsub).data(ntrial).error_trial

                Gratton_subjects(nsub).error_trials(nerror) = Gratton_subjects(nsub).data(ntrial);
                nerror=nerror+1;

                continue;

            end;
            
            % The posterror trials are with correct response
            if Gratton_subjects(nsub).data(ntrial).posterror_trial

                Gratton_subjects(nsub).posterror_trials(nposterror) = Gratton_subjects(nsub).data(ntrial);
                nposterror=nposterror+1;

                continue;
            end;                                    
            
            %seperate the data according to the previous and the current
            %trial type
            for ncond=1:length(con_names)

                for nlast=1:length(con_names)

                    index_name = [con_names{nlast}(1:5) '_' con_names{ncond}(1:5)];

                    if strcmp (index_name, Gratton_subjects(nsub).data(ntrial).con_name)

                            rawRT {(ncond-1)*length(con_names)+nlast}(ncombination{(ncond-1)*length(con_names)+nlast})=Gratton_subjects(nsub).data(ntrial).RT;
                            rawTR {(ncond-1)*length(con_names)+nlast}(ncombination{(ncond-1)*length(con_names)+nlast})=Gratton_subjects(nsub).data(ntrial).TR;
                            index_n {(ncond-1)*length(con_names)+nlast}(ncombination{(ncond-1)*length(con_names)+nlast}) = ntrial;
                            
                            ncombination{(ncond-1)*length(con_names)+nlast} = ncombination{(ncond-1)*length(con_names)+nlast} + 1;

                    end;

                end;
            end;
        end;

        for ncond=1:length(con_names)

            for nlast=1:length(con_names)

                index_name = [con_names{nlast}(1:5) '_' con_names{ncond}(1:5)];

                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).con_name= index_name;
                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).rawRT = rawRT{(ncond-1)*length(con_names)+nlast};
                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).rawTR = rawTR{(ncond-1)*length(con_names)+nlast};
                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).index_n = index_n{(ncond-1)*length(con_names)+nlast};

                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).mRT = mean(Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).rawRT)/10;
                Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).MedianRT = median(Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).rawRT)/10;

            end;
        end;
        
        
        %Removing outliers
        for ncond=1:length(Gratton_subjects(nsub).correct_trials)

            %find outliers >Q3 + 3 * (Q3-Q1) or < Q1 - 3 * (Q3-Q1)
            %quartileRT = ling_quartile (Gratton_subjects(nsub).correct_trials(ncond).rawRT); % 1st: 25%, 2nd: 50%, 3rd: 75%
            Gratton_subjects(nsub).correct_trials(ncond).stdRT = std(Gratton_subjects(nsub).correct_trials(ncond).rawRT)/10;
            
            %IRQ = quartileRT(3) - quartileRT(1);
            u_index_outlier=find(Gratton_subjects(nsub).correct_trials(ncond).rawRT > 10*(Gratton_subjects(nsub).correct_trials(ncond).mRT + 3 * Gratton_subjects(nsub).correct_trials(ncond).stdRT));
            l_index_outlier=find(Gratton_subjects(nsub).correct_trials(ncond).rawRT < 10*(Gratton_subjects(nsub).correct_trials(ncond).mRT - 3 * Gratton_subjects(nsub).correct_trials(ncond).stdRT));

            rawRT_rm_outlier=Gratton_subjects(nsub).correct_trials(ncond).rawRT;
            rawRT_rm_outlier([u_index_outlier l_index_outlier])='';

            rawTR_rm_outlier=Gratton_subjects(nsub).correct_trials(ncond).rawTR;
            rawTR_rm_outlier([u_index_outlier l_index_outlier])='';

            Gratton_subjects(nsub).correct_trials(ncond).correct_RT_index_outlier = [u_index_outlier l_index_outlier];
            Gratton_subjects(nsub).correct_trials(ncond).correct_RT_rm_outlier=rawRT_rm_outlier;
            Gratton_subjects(nsub).correct_trials(ncond).correct_TR_rm_outlier=rawTR_rm_outlier;
            Gratton_subjects(nsub).correct_trials(ncond).mRT_rm_outlier = mean(rawRT_rm_outlier)/10; %ms
            Gratton_subjects(nsub).correct_trials(ncond).MedianRT_rm_outlier = median(rawRT_rm_outlier)/10; %ms

        end;
        
        %the number of trials of each condition        
        for ncond=1:length(con_names)

            for nlast=1:length(con_names)

                index_name = [con_names{nlast}(1:5) '_' con_names{ncond}(1:5)];
                
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).con_name = index_name;
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).correct = length(Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).rawRT);
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).correct_index = Gratton_subjects(nsub).correct_trials((ncond-1)*length(con_names)+nlast).index_n;
                
                num_error=0;
                error_array=[];
                for ne=1:length(Gratton_subjects(nsub).error_trials)
                    if strcmp(index_name, Gratton_subjects(nsub).error_trials(ne).con_name)
                        num_error=num_error+1;
                        error_array = [error_array Gratton_subjects(nsub).error_trials(ne).trial_index];
                    end;                    
                end;
                
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).error = num_error;
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).error_array = error_array;
                                
                num_posterror=0;
                posterror_array=[];
                for ne=1:length(Gratton_subjects(nsub).posterror_trials)
                    if strcmp(index_name, Gratton_subjects(nsub).posterror_trials(ne).con_name)
                        num_posterror=num_posterror+1;
                        posterror_array = [posterror_array Gratton_subjects(nsub).posterror_trials(ne).trial_index];
                    end;                    
                end;
                
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).posterror = num_posterror;
                Gratton_subjects(nsub).trial_number((ncond-1)*length(con_names)+nlast).posterror_array = posterror_array;
                                
            end;
        end;                                
                
    end;
end;

save (['Data_Results_' results_name], 'subject_files', 'subjects_data', 'RTD_subjects', 'Gratton_subjects');

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%output results
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fid = fopen(['Results_Stat_' results_name '.csv'], 'w');

%Reaction time
%header - Average
fprintf(fid, 'RT_Average\n\n');
fprintf(fid, ',Subjects,');
for ncond=1:length(con_names)
    fprintf(fid, '%s,', con_names{ncond});
end;
fprintf(fid, '\n');

%data
for nsub=1:length(subjects_data)
    fprintf(fid, ',%s,', subjects_data{nsub}.subname);
    for ncond=1:length(con_names)
        
        fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mRT);
    
    end;
    
    fprintf(fid, '\n');
    
end;

fprintf(fid, '\n\n');
%header - Median
fprintf(fid, 'RT_Median\n\n');
fprintf(fid, ',Subjects,');
for ncond=1:length(con_names)
    fprintf(fid, '%s,', con_names{ncond});
end;
fprintf(fid, '\n');

%data
for nsub=1:length(subjects_data)
    fprintf(fid, ',%s,', subjects_data{nsub}.subname);
    for ncond=1:length(con_names)
        
        fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).MedianRT);
    
    end;
    
    fprintf(fid, '\n');
    
end;




%RT without outliers
fprintf(fid, '\n\n\n');

fprintf(fid, 'RT WITHOUT outliers: >mean + 3 * std or < mean - 3 * std\n\n');

%header - Average
fprintf(fid, 'RT - Average');
fprintf(fid, ',Subjects,');
for ncond=1:length(con_names)
    fprintf(fid, '%s,', con_names{ncond});
end;
fprintf(fid, '\n');

%data
for nsub=1:length(subjects_data)
    fprintf(fid, ',%s,', subjects_data{nsub}.subname);
    for ncond=1:length(con_names)
        
        fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mRT_rm_outlier);
    
    end;
    
    fprintf(fid, '\n');
    
end;

fprintf(fid, '\n\n');
%header - Median
fprintf(fid, 'RT - Median');
fprintf(fid, ',Subjects,');
for ncond=1:length(con_names)
    fprintf(fid, '%s,', con_names{ncond});
end;
fprintf(fid, '\n');

%data
for nsub=1:length(subjects_data)
    fprintf(fid, ',%s,', subjects_data{nsub}.subname);
    for ncond=1:length(con_names)
        
        fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).MedianRT_rm_outlier);
    
    end;
    
    fprintf(fid, '\n');
    
end;


%Error rate
fprintf(fid, '\n');
fprintf(fid, '\n');
fprintf(fid, '\n');

fprintf(fid, 'Error rate\n\n');

%header
fprintf(fid, ',Subjects,');
for ncond=1:length(con_names)
    fprintf(fid, '%s,', con_names{ncond});
end;
fprintf(fid, '\n');

%data
for nsub=1:length(subjects_data)
    fprintf(fid, ',%s,', subjects_data{nsub}.subname);
    for ncond=1:length(con_names)
        
        fprintf(fid, '%0.3f,', subjects_data{nsub}.conditions(ncond).error);
    
    end;
    
    fprintf(fid, '\n');
    
end;

fclose(fid);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Results of Repetition effect
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if Repetition
    fid = fopen(['Results_Repetition_' results_name '.csv'], 'w');
    
    %--------Stimulus_Repetition
    fprintf(fid, 'Stimulus_Repetition\n\n');
    
    %header - Ratio
    fprintf(fid, 'Stim_Rep - Ratio');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.5f,', subjects_data{nsub}.conditions(ncond).stimulus_repetition_ratio);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    %header - RT_Without_Repetion
    fprintf(fid, 'Stim_Rep - RT_Without_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_stimulus_repetition_RT_0);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    %header - RT_With_Repetion
    fprintf(fid, 'Stim_Rep - RT_With_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_stimulus_repetition_RT_1);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    
    
    
    %--------Response_Repetition
    fprintf(fid, 'Response_Repetition\n\n');
    
    %header - Ratio
    fprintf(fid, 'Res_Rep - Ratio');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.5f,', subjects_data{nsub}.conditions(ncond).response_repetition_ratio);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    %header - RT_Without_Repetion
    fprintf(fid, 'Res_Rep - RT_Without_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_response_repetition_RT_0);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    %header - RT_With_Repetion
    fprintf(fid, 'Res_Rep - RT_With_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_response_repetition_RT_1);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    
    
     %--------Stimulus_OR_Response
    fprintf(fid, 'Stimulus_OR_Response_Repetition\n\n');
    
    %header - Ratio
    fprintf(fid, 'Stim_Res_Rep - Ratio');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.5f,', subjects_data{nsub}.conditions(ncond).stim_res_repetition_ratio);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    %header - RT_Without_Repetion
    fprintf(fid, 'Res_Rep - RT_Without_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_stim_res_repetition_RT_0);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    %header - RT_With_Repetion
    fprintf(fid, 'Res_Rep - RT_With_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_stim_res_repetition_RT_1);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    %--------Stimulus_Repetition, added by Ling, 2014-12-31
    fprintf(fid, 'Mapping_Repetition\n\n');
    
    %header - Ratio
    fprintf(fid, 'Mapping_Rep - Ratio');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.5f,', subjects_data{nsub}.conditions(ncond).mapping_repetition_ratio);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    %header - RT_Without_Repetion
    fprintf(fid, 'Stim_Rep - RT_Without_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_mapping_repetition_RT_0);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    %header - RT_With_Repetion
    fprintf(fid, 'Mapping_Rep - RT_With_Repetition');
    fprintf(fid, ',Subjects,');
    for ncond=1:length(con_names)
        fprintf(fid, '%s,', con_names{ncond});
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(subjects_data)
        fprintf(fid, ',%s,', subjects_data{nsub}.subname);
        for ncond=1:length(con_names)
            
            fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).mean_mapping_repetition_RT_1);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n\n\n\n\n');
    
    
    fclose(fid);
                    
end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Results of Parts of Data
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if part > 1
    fid = fopen(['Results_Stat_Parts_Con_' results_name '.csv'], 'w');
    
    %Reaction time
    %header - Average         
    for npart=1:part
        fprintf(fid, 'RT_Average_Parts_Con_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_con(npart).mRT);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
        
        fprintf(fid, '\n\n');
    end;
    
    for npart=1:part
        %header - Median
        fprintf(fid, 'RT_Median_Parts_Con_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_con(npart).MedianRT);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
    
    
    
    
    %RT without outliers
    fprintf(fid, '\n\n\n');
    
    fprintf(fid, 'RT WITHOUT outliers: >mean + 3 * std or < mean - 3 * std\n\n');
    
    for npart=1:part
        fprintf(fid, 'RT_Average_Parts_Con_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_con(npart).mRT_rm_outlier);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
        
        fprintf(fid, '\n\n');
    end;
    
    for npart=1:part
        %header - Median
        fprintf(fid, 'RT_Median_Parts_Con_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_con(npart).MedianRT_rm_outlier);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
    
    %Error rate
    fprintf(fid, '\n');
    fprintf(fid, '\n');
    fprintf(fid, '\n');
    
    
    for npart=1:part
        fprintf(fid, 'Error rate_Parts_Con_%d\n\n', npart);
        
        %header
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.3f,', subjects_data{nsub}.conditions(ncond).parts_con(npart).error);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
        
    fclose(fid);
    
        
    %%%
    %%% Time
    %%%
    
    fid = fopen(['Results_Stat_Parts_Time_' results_name '.csv'], 'w');
    
    %Reaction time
    %header - Average         
    for npart=1:part
        fprintf(fid, 'RT_Average_Parts_Time_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_time(npart).mRT);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
        
        fprintf(fid, '\n\n');
    end;
    
    for npart=1:part
        %header - Median
        fprintf(fid, 'RT_Median_Parts_Time_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_time(npart).MedianRT);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
    
    
    
    
    %RT without outliers
    fprintf(fid, '\n\n\n');
    
    fprintf(fid, 'RT WITHOUT outliers: >mean + 3 * std or < mean - 3 * std\n\n');
    
    for npart=1:part
        fprintf(fid, 'RT_Average_Parts_Time_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_time(npart).mRT_rm_outlier);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
        
        fprintf(fid, '\n\n');
    end;
    
    for npart=1:part
        %header - Median
        fprintf(fid, 'RT_Median_Parts_Time_%d\n\n', npart);
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.1f,', subjects_data{nsub}.conditions(ncond).parts_time(npart).MedianRT_rm_outlier);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
    
    %Error rate
    fprintf(fid, '\n');
    fprintf(fid, '\n');
    fprintf(fid, '\n');
    
    
    for npart=1:part
        fprintf(fid, 'Error rate_Parts_Time_%d\n\n', npart);
        
        %header
        fprintf(fid, ',Subjects,');
        for ncond=1:length(con_names)
            fprintf(fid, '%s,', con_names{ncond});
        end;
        fprintf(fid, '\n');
        
        %data
        for nsub=1:length(subjects_data)
            fprintf(fid, ',%s,', subjects_data{nsub}.subname);
            for ncond=1:length(con_names)
                
                fprintf(fid, '%0.3f,', subjects_data{nsub}.conditions(ncond).parts_time(npart).error);
                
            end;
            
            fprintf(fid, '\n');
            
        end;
    end;
        
    fclose(fid);
    
end;



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Results of RT Distribution
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if RTD

    fid = fopen(['Results_RT_Distribution_' results_name '.csv'], 'w');

    fprintf(fid, 'RTD_Prctile is [');
    %Ling Wang, 2018-3-8
    fprintf(fid, '%d ',RTD_Prctile );
    fprintf(fid, ']\n\n');
    
    
    for ncond=1:length(con_names)
        fprintf(fid, 'Condition: %s\n\n', con_names{ncond});

        %header
        fprintf(fid, ',Subjects,');
        for nbin=1:length(RTD_subjects(1).conditions(ncond).mean_Bins)
            fprintf(fid, 'Bin_%d,', nbin);
        end;
        fprintf(fid, '\n');

        %data
        for nsub=1:length(RTD_subjects)
            fprintf(fid, ',%s,', RTD_subjects(nsub).subname);
            for nbin=1:length(RTD_subjects(nsub).conditions(ncond).mean_Bins)

                fprintf(fid, '%0.1f,', RTD_subjects(nsub).conditions(ncond).mean_Bins(nbin)/10);

            end;

            fprintf(fid, '\n');

        end;


        fprintf(fid, '\n\n\n');

    end;

    if length(RTD_Comp) > 0
        for ncomp=1:numel(RTD_Comp)
            fprintf(fid, 'Condition Comparison: %s - %s\n\n', con_names{RTD_Comp{ncomp}(1)}, con_names{RTD_Comp{ncomp}(2)});

            %header
            fprintf(fid, ',Subjects,');
            for nbin=1:length(RTD_subjects(1).conditions(ncond).mean_Bins)
                fprintf(fid, 'Bin_%d,', nbin);
            end;
            fprintf(fid, '\n');

            %data
            for nsub=1:length(RTD_subjects)
                fprintf(fid, ',%s,', RTD_subjects(nsub).subname);
                for nbin=1:length(RTD_subjects(nsub).conditions(ncond).mean_Bins)

                    fprintf(fid, '%0.1f,', (RTD_subjects(nsub).conditions(RTD_Comp{ncomp}(1)).mean_Bins(nbin) - RTD_subjects(nsub).conditions(RTD_Comp{ncomp}(2)).mean_Bins(nbin))/10);

                end;

                fprintf(fid, '\n');

            end;


            fprintf(fid, '\n\n\n');

        end;
    end;

    %RT removing outliers
    fprintf(fid, 'RT WITHOUT outliers: >mean + 3 * std or < mean - 3 * std\n\n');
    for ncond=1:length(con_names)
        fprintf(fid, 'Condition: %s\n\n', con_names{ncond});

        %header
        fprintf(fid, ',Subjects,');
        for nbin=1:length(RTD_subjects(1).conditions(ncond).mean_Bins_rm_outlier)
            fprintf(fid, 'Bin_%d,', nbin);
        end;
        fprintf(fid, '\n');

        %data
        for nsub=1:length(RTD_subjects)
            fprintf(fid, ',%s,', RTD_subjects(nsub).subname);
            for nbin=1:length(RTD_subjects(nsub).conditions(ncond).mean_Bins_rm_outlier)

                fprintf(fid, '%0.1f,', RTD_subjects(nsub).conditions(ncond).mean_Bins_rm_outlier(nbin)/10);

            end;

            fprintf(fid, '\n');

        end;


        fprintf(fid, '\n\n\n');

    end;

    if length(RTD_Comp) > 0
        for ncomp=1:numel(RTD_Comp)
            fprintf(fid, 'Condition Comparison: %s - %s\n\n', con_names{RTD_Comp{ncomp}(1)}, con_names{RTD_Comp{ncomp}(2)});

            %header
            fprintf(fid, ',Subjects,');
            for nbin=1:length(RTD_subjects(1).conditions(ncond).mean_Bins_rm_outlier)
                fprintf(fid, 'Bin_%d,', nbin);
            end;
            fprintf(fid, '\n');

            %data
            for nsub=1:length(RTD_subjects)
                fprintf(fid, ',%s,', RTD_subjects(nsub).subname);
                for nbin=1:length(RTD_subjects(nsub).conditions(ncond).mean_Bins_rm_outlier)

                    fprintf(fid, '%0.1f,', (RTD_subjects(nsub).conditions(RTD_Comp{ncomp}(1)).mean_Bins_rm_outlier(nbin) - RTD_subjects(nsub).conditions(RTD_Comp{ncomp}(2)).mean_Bins_rm_outlier(nbin))/10);

                end;

                fprintf(fid, '\n');

            end;

            fprintf(fid, '\n\n\n');

        end;
    end;

    fclose(fid);

    if fMRI_RTD
        fid = fopen(['fMRI_Stimonset_RTD_' results_name '.csv'], 'w');
        %header
        fprintf(fid, 'Stim Onset\n\n');

        for nsub=1:length(RTD_subjects)

            fprintf(fid, '%s\n\n', RTD_subjects(nsub).subname);

            for ncon=1:length(RTD_subjects(nsub).conditions)
                
                for nbin=1:length(RTD_subjects(nsub).conditions(ncon).mean_Bins)

                    fprintf(fid, '%s_Bin_%d =[,', RTD_subjects(nsub).conditions(ncon).con_name, nbin);
                    
                    for ntr=1:length(RTD_subjects(nsub).conditions(ncon).TR{nbin})
                    
                        fprintf(fid, '%f,', RTD_subjects(nsub).conditions(ncon).TR{nbin}(ntr));
                    end;
                    
                    fprintf(fid, '];\n\n');

                end;               

            end;

            fprintf(fid, 'error_trials =[,');
            for ncon=1:length(con_names)
                for ne=1:length(RTD_subjects(nsub).conditions(ncon).wrong_TR)
                    fprintf(fid, '%f,', RTD_subjects(nsub).conditions(ncon).wrong_TR(ne));
                end;
            end;
            fprintf(fid, '];\n\n');
            
            fprintf(fid, '\n\n\n');

        end;

        fclose(fid);
    end;


end;


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
%Results of Gratton effects
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

if Gratton
    
    fid = fopen(['Results_Gratton_' results_name '.csv'], 'w');
    
    %Reaction time
    %header
    fprintf(fid, 'RT\n\n');
    fprintf(fid, ',Subjects,');
    for ncombination=1:length(Gratton_subjects(1).correct_trials)
        fprintf(fid, '%s,', Gratton_subjects(1).correct_trials(ncombination).con_name);
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(Gratton_subjects)
        fprintf(fid, ',%s,', Gratton_subjects(nsub).subname);
        for ncombination=1:length(Gratton_subjects(nsub).correct_trials)
            
            fprintf(fid, '%0.1f,', Gratton_subjects(nsub).correct_trials(ncombination).mRT);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    fprintf(fid, '\n\n');
    
    fprintf(fid, 'RT WITHOUT outliers: >mean + 3 * std or < mean - 3 * std\n\n');
    fprintf(fid, ',Subjects,');
    for ncombination=1:length(Gratton_subjects(1).correct_trials)
        fprintf(fid, '%s,', Gratton_subjects(1).correct_trials(ncombination).con_name);
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(Gratton_subjects)
        fprintf(fid, ',%s,', Gratton_subjects(nsub).subname);
        for ncombination=1:length(Gratton_subjects(nsub).correct_trials)
            
            fprintf(fid, '%0.1f,', Gratton_subjects(nsub).correct_trials(ncombination).mRT_rm_outlier);
            
        end;
        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\n\n');
    %Trial Number
    %header
    fprintf(fid, 'Trial Numbers\n\n');
    
    fprintf(fid, 'Correct Trial \n');    
    fprintf(fid, ',Subjects,');
    for ncombination=1:length(Gratton_subjects(1).correct_trials)
        fprintf(fid, '%s,', Gratton_subjects(1).correct_trials(ncombination).con_name);
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(Gratton_subjects)
        fprintf(fid, ',%s,', Gratton_subjects(nsub).subname);
        for ncombination=1:length(Gratton_subjects(nsub).trial_number)
            
            fprintf(fid, '%d,', Gratton_subjects(nsub).trial_number(ncombination).correct);            
        end;        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\nError Trial \n');    
    fprintf(fid, ',Subjects,');
    for ncombination=1:length(Gratton_subjects(1).correct_trials)
        fprintf(fid, '%s,', Gratton_subjects(1).correct_trials(ncombination).con_name);
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(Gratton_subjects)
        fprintf(fid, ',%s,', Gratton_subjects(nsub).subname);
        for ncombination=1:length(Gratton_subjects(nsub).trial_number)
            
            fprintf(fid, '%d,', Gratton_subjects(nsub).trial_number(ncombination).error);            
        end;        
        fprintf(fid, '\n');
        
    end;
    
    fprintf(fid, '\nPostError Trial \n');    
    fprintf(fid, ',Subjects,');
    for ncombination=1:length(Gratton_subjects(1).correct_trials)
        fprintf(fid, '%s,', Gratton_subjects(1).correct_trials(ncombination).con_name);
    end;
    fprintf(fid, '\n');
    
    %data
    for nsub=1:length(Gratton_subjects)
        fprintf(fid, ',%s,', Gratton_subjects(nsub).subname);
        for ncombination=1:length(Gratton_subjects(nsub).trial_number)
            
            fprintf(fid, '%d,', Gratton_subjects(nsub).trial_number(ncombination).posterror);            
        end;        
        fprintf(fid, '\n');
        
    end;
            
    fclose(fid);
    
    if fMRI_Gratton

        fid = fopen(['fMRI_Stimonset_Gratton_' results_name '.csv'], 'w');
        %header
        fprintf(fid, 'Stim Onset\n\n');
        
        for nsub=1:length(Gratton_subjects)
            
            fprintf(fid, '%s\n\n', Gratton_subjects(nsub).subname);
                                                
            for ncon=1:length(Gratton_subjects(nsub).correct_trials)
                
                fprintf(fid, '%s =[,', Gratton_subjects(nsub).correct_trials(ncon).con_name);
                
                for nstim=1:length(Gratton_subjects(nsub).correct_trials(ncon).rawTR)
                    fprintf(fid, '%f,', Gratton_subjects(nsub).correct_trials(ncon).rawTR(nstim));
                end;

                fprintf(fid, '];\n\n');


            end;
            
            fprintf(fid, 'error_trials =[,');
            for ne=1:length( Gratton_subjects(nsub).error_trials)
                fprintf(fid, '%f,', Gratton_subjects(nsub).error_trials(ne).TR);
            end;
            fprintf(fid, '];\n\n');
            
            fprintf(fid, 'posterror_trials =[,');
            for ne=1:length( Gratton_subjects(nsub).posterror_trials)
                fprintf(fid, '%f,', Gratton_subjects(nsub).posterror_trials(ne).TR);
            end;
            fprintf(fid, '];\n\n');
            
            fprintf(fid, 'first_trial =[,');
            fprintf(fid, '%f,', Gratton_subjects(nsub).data(1).TR);
            fprintf(fid, '];\n\n');
            
            fprintf(fid, '\n\n\n');  
            
        end;                
        
        fclose(fid);        
    end;
    
    
end;

% fMRI stimulus onset

if fMRI       
    
    %output the onset results    
    fid = fopen(['fMRI_stimonset_' results_name '.csv'], 'w');
    
    for nsub=1:length(subjects_data)
        
        fprintf(fid, '%s\n\n', subjects_data{nsub}.subname);
        
        for ncon=1:length(con_names)
            
            fprintf(fid, '%s =[,', subjects_data{nsub}.conditions(ncon).con_name);            
            for nstim=1:length(subjects_data{nsub}.conditions(ncon).correct_TR_rm_outlier)
                fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).correct_TR_rm_outlier(nstim));
            end;
            
            fprintf(fid, '];\n\n');            
            
        end;
                                        
        %errors & outliers
        fprintf(fid, 'errors_outliers =[,');
        
        for ncon=1:length(con_names)
           for nstim=1:length(subjects_data{nsub}.conditions(ncon).wrong_TR)
               fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).wrong_TR(nstim));
           end;
           
           %outliers
            for nstim=1:length(subjects_data{nsub}.conditions(ncon).correct_RT_index_outlier)
                fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).correct_TR(subjects_data{nsub}.conditions(ncon).correct_RT_index_outlier(nstim)));
            end;
            
        end;               
        
        fprintf(fid, '];\n\n');        
        fprintf(fid, '\n\n\n\n\n');
        
        
    end;
    
    fclose(fid);
    
    if part > 1
        
        fid = fopen(['fMRI_stimonset_Parts_Con_' int2str(part) '_' results_name '.csv'], 'w');
        for nsub=1:length(subjects_data)
            
            fprintf(fid, '%s\n\n', subjects_data{nsub}.subname);
            
            for ncon=1:length(con_names)
                
                for npart=1:part
                    fprintf(fid, '%s_part_%d =[,', subjects_data{nsub}.conditions(ncon).con_name, npart);
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_con(npart).correct_TR_rm_outlier)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_con(npart).correct_TR_rm_outlier(nstim));
                    end;
                    
                    fprintf(fid, '];\n\n');
                end;
                
            end;
            
            %errors & outliers
            fprintf(fid, 'errors_outliers =[,');
            
            for ncon=1:length(con_names)
                for npart=1:part
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_con(npart).wrong_TR)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_con(npart).wrong_TR(nstim));
                    end;
                    
                    %outliers
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_con(npart).correct_RT_index_outlier)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_con(npart).correct_TR(subjects_data{nsub}.conditions(ncon).parts_con(npart).correct_RT_index_outlier(nstim)));
                    end;
                    
                end;
                
            end;
            
            fprintf(fid, '];\n\n');
            fprintf(fid, '\n\n\n\n\n');
            
        end;
        fclose(fid);
        
        %time parts
        fid = fopen(['fMRI_stimonset_Parts_Time_' int2str(part) '_' results_name '.csv'], 'w');
        for nsub=1:length(subjects_data)
            
            fprintf(fid, '%s\n\n', subjects_data{nsub}.subname);
            
            for ncon=1:length(con_names)
                
                for npart=1:part
                    fprintf(fid, '%s_part_%d =[,', subjects_data{nsub}.conditions(ncon).con_name, npart);
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_time(npart).correct_TR_rm_outlier)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_time(npart).correct_TR_rm_outlier(nstim));
                    end;
                    
                    fprintf(fid, '];\n\n');
                end;
                
            end;
            
            %errors & outliers
            fprintf(fid, 'errors_outliers =[,');
            
            for ncon=1:length(con_names)
                for npart=1:part
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_time(npart).wrong_TR)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_time(npart).wrong_TR(nstim));
                    end;
                    
                    %outliers
                    for nstim=1:length(subjects_data{nsub}.conditions(ncon).parts_time(npart).correct_RT_index_outlier)
                        fprintf(fid, '%f,', subjects_data{nsub}.conditions(ncon).parts_time(npart).correct_TR(subjects_data{nsub}.conditions(ncon).parts_time(npart).correct_RT_index_outlier(nstim)));
                    end;
                    
                end;
                
            end;
            
            fprintf(fid, '];\n\n');
            fprintf(fid, '\n\n\n\n\n');
            
        end;
        fclose(fid);
        
        
        
    end;
    
    
    
end;

fprintf(1, 'End\n');

